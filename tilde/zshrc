# Colors are awesome
autoload colors; colors;

# Load the completion system
autoload -U compinit && compinit

# Parameter Expansion, Command Substitution and arithemtic expansion are performed in prompts
setopt prompt_subst

# No beep or visual bell
setopt no_beep

# Remove any right prompt from display when accepting a commandline
setopt transient_rprompt

# Try to find a similar command when the command was not found
setopt correct

# Enable completion within a word
setopt complete_in_word

# Enable emacs mode
setopt emacs

# History Configuration (from zshuery)
HISTFILE=$HOME/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt hist_ignore_dups
setopt hist_reduce_blanks
setopt share_history
setopt append_history
setopt hist_verify
setopt inc_append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_space

# quote pasted URLs
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

# My Prompt
local smiley="%(?,%{$fg[green]%}☺%{$reset_color%},%{$fg[red]%}☹%{$reset_color%})  "

function git-status() {
  if [[ `git rev-parse --git-dir 2>/dev/null` != '' ]]; then
    # We are in a git repo

    local gitdirty=""
    if [[ `git ls-files -m` != "" ]]; then
      # There are changes to files

      gitdirty="%{$fg[red]%} ✗%{$reset_color%}"
    fi

    echo ' @' `git symbolic-ref -q HEAD | sed 's/refs\/heads\///'` $gitdirty
  fi
}

PROMPT='${smiley}'
RPROMPT='%~$(git-status)'

# Configure auto correct
setopt correct_all
alias man='nocorrect man'
alias mv='nocorrect mv'
alias mysql='nocorrect mysql'
alias mkdir='nocorrect mkdir'
alias curl='nocorrect curl'
alias rake='nocorrect rake'
alias make='nocorrect make'
alias cake='nocorrect cake'

# Necessary
alias please='sudo'

# Fast one directory up
alias ..='cd ..'

# One-letter shortcuts
alias l='ls -al'
alias o='open'
alias m='make'
alias g='bundle exec guard'
alias b='bundle'

# Open files with Mac OS X applications
alias chrome="open -a \"Google Chrome\""
alias safari="open -a Safari"
alias marked="open -a Marked"
alias pm="open -a Pixelmator"

# Reload zshrc
alias reload="source ~/.zshrc"

# Copy output of last command to clipboard
alias copy_to_pastebord="fc -e - | pbcopy"

# Get current public IP
alias ip="curl icanhazip.com"

# Fix for REPLs and Editors without Readline
alias csi='rlwrap csi '

# Github-flavored Git
function git(){hub $@}

# Manuals for Ruby People
alias man="gem man -s"

# Use vim as default editor – git for example
export EDITOR='vim'

# This loads RVM into a shell session.
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# The same for tmuxinator
[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator

# Home
PATH=$PATH:$HOME/.bin

# Add RVM to PATH
PATH=$PATH:$HOME/.rvm/bin

# For homebrew
PATH=/usr/local/bin:$PATH
PATH=/usr/local/sbin:$PATH

# For LaTeX
PATH=/usr/texbin:$PATH

# For Cabal
PATH=/Users/moonglum/.cabal/bin:$PATH

# For NPM
PATH=/usr/local/share/npm/bin:$PATH

# For Python (Only user installed packages)
PATH=/Users/moonglum/Library/Python/2.7/bin:$PATH

# For Heroku Toolbelt
PATH=/usr/local/heroku/bin:$PATH

# Update ArangoDB devel and rebuild it
function arango-rebuild {
  cd ~/Code/arangodb
  git pull
  make clean
  make setup
  make setup
  ./configure --enable-all-in-one-v8 --enable-all-in-one-libev --enable-all-in-one-icu --enable-relative
  # --enable-maintainer-mode
  make -j4
}

# Sharing
function share_image {
  scp $1 moonglum@moonglum.net:~/images/
  echo http://images.moonglum.net/$1
}

# Ruby Development
function current-version {
  gem list -r $1$
}

# Crazy Stuff from DAS
function print-x-times {
  jot -b $2 - 1 $1 | xargs | tr -d ' '
}

function run-rake-task-for-revision {
  git checkout -q $2 &&
    bundle update --quiet &&
    bundle exec rake $1 |
    grep Finished |
    awk '{print $3}' |
    read time &&
    ((hashes = $time * 50)) &&
    echo "$rev `print-x-times $hashes '#'` $time"
}
# git rev-list --reverse development~20..development | while read rev; do run-rake-task-for-revision spec:unit $rev; done

# mkdir and cd to it (from oh-my-zsh)
function mcd() {
  mkdir -p "$1" && cd "$1";
}

# extract archive (from zshuery)
ex() {
  if [[ -f $1 ]]; then
    case $1 in
      *.tar.bz2) tar xvjf $1;;
      *.tar.gz) tar xvzf $1;;
      *.tar.xz) tar xvJf $1;;
      *.tar.lzma) tar --lzma xvf $1;;
      *.bz2) bunzip $1;;
      *.rar) unrar $1;;
      *.gz) gunzip $1;;
      *.tar) tar xvf $1;;
      *.tbz2) tar xvjf $1;;
      *.tgz) tar xvzf $1;;
      *.zip) unzip $1;;
      *.Z) uncompress $1;;
      *.7z) 7z x $1;;
      *.dmg) hdiutul mount $1;; # mount OS X disk images
      *) echo "'$1' cannot be extracted via >ex<";;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# iTunes Control
alias play='osascript -e "tell application \"iTunes\" to play"'
alias pause='osascript -e "tell application \"iTunes\" to pause"'

alias c='nocorrect c'
c() { cd ~/Code/$1; }
_c() { _files -W ~/Code -/; }
compdef _c c

# zsh-syntax-highlighting
source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
