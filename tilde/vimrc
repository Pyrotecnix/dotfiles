" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
" This is required for Vundle
filetype off
" Activate Syntax Highlight
syntax enable
" Set default encoding to UTF-8
set encoding=utf-8
" Highlight search results
set hlsearch
" Deactivate Wrapping
set nowrap
" Treat all numbers as decimal
set nrformats=
" Highlight the Current Line
set cursorline
" I don't like Swapfiles
set noswapfile
" Use the clipboard of Mac OS
" set clipboard=unnamed
" This makes RVM work inside Vim. I have no idea why – gary bernhardt
set shell=bash
" Clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>
" Fix slow O inserts from Gary Bernhardt
:set timeout timeoutlen=1000 ttimeoutlen=100
" Directory of current file (`:e %%` for example) – Gary Bernhardt
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" === MacVim Setup ===

if has("gui_running")
  " Right Font and Font-Size
  set guifont=Source\ Code\ Pro:h14
  " No Toolbar
  set guioptions=egmrt
  " No Scrollbar
  set guioptions-=r
endif

" === Vundle Setup ===
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

" =========== Solarized Dark ===========
" Currently using the dark version
Bundle 'altercation/vim-colors-solarized'
set background=dark
colorscheme solarized

" ======== Added Functionality ========
" Polyglot: A collection of language packs, loaded on demand
Bundle "sheerun/vim-polyglot"
" Tabular: Amazing Aligning Utility
Bundle "godlygeek/tabular"
" Ack: ack integration
Bundle "mileszs/ack.vim"
" Fugitive: The best Git integration that exists
Bundle "tpope/vim-fugitive"
" Commentary: Minimalistic commenting plugin
Bundle "tpope/vim-commentary"
" Dispatch: asynchronous build and test dispatcher
Bundle "tpope/vim-dispatch"
" Surround: Quoting/Parenthesizing made simple
Bundle "tpope/vim-surround"
" Repeat: Enable repeat for Surround and Commentary
Bundle "tpope/vim-repeat"
" Emoji: Emojis. For Vim. Awesome.
Bundle "junegunn/vim-emoji"

" ======= Syntastic =======
" Really great Syntax checker
Bundle "scrooloose/syntastic"

" Also run a Syntax Check when the file is opened
let g:syntastic_check_on_open=1

" GUI MacVim only: Popover for each line with errors
let g:syntastic_enable_balloons=1

if emoji#available()
  " Terminal Vim for example
  " Bombs and Marks
  " let g:syntastic_error_symbol=emoji#for('boom')
  " let g:syntastic_warning_symbol=emoji#for('exclamation')
  " Cats
  let g:syntastic_error_symbol=emoji#for('scream_cat')
  let g:syntastic_warning_symbol=emoji#for('crying_cat_face')
else
  " GUI MacVim for example
  let g:syntastic_error_symbol='✗'
  let g:syntastic_warning_symbol='⚠'
end

" ======= CtrlP =======
" Full path fuzzy finder
Bundle "kien/ctrlp.vim"

" Ignore files that are git ignored (thanks @railsbros-dirk)
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files --exclude-standard -co'],
    \ 2: ['.ctrlp_root_dir', 'find %s -type f'],
  \ },
  \ 'fallback': 'find %s -type f'
\ }

" Jump to the window when it is already open (only when in this tab)
let g:ctrlp_switch_buffer = 'e'

" Disable caching
let g:ctrlp_use_caching = 0

" ========= Whitespace, Indentation and Invisible Characters =========
" based upon vimcasts

" Show invisible characters:
" Tabs and trailing whitespace
set list
set listchars=tab:›\ ,trail:‹

" Tabs should be 2 spaces
set tabstop=2
" Soft-Tabs should be 2 spaces
set softtabstop=2
" When shifting, use 2 spaces
set shiftwidth=2
" Use Soft-Tabs
set expandtab

" Makefiles require tabs
autocmd FileType make setlocal noexpandtab

" Highlight Characters that overstep the 100 character limit
match ErrorMsg '\%>100v.\+'

" Automatically set the indent of a new line (local to buffer)
" from railsbros-dirk
set ai

" === Spell Checking ===
" No further configuration necessary:
" Checks Comments, Latex, Markdown...
set spell
" I prefer British English, but American English is used in almost all projects
" I'm involved in. Naff.
set spelllang=en_us

" === Language Specific Setting ===
" From janus

" File types that do not contain source code should wrap their text
" and should not have a character limit per line.
function! s:setupWrapping()
  set wrap
  set linebreak
  set nolist
  match ErrorMsg ''
endfunction

function! s:setupFourSpacesIndent()
  " Tabs should be 4 spaces
  set tabstop=4
  " Soft-Tabs should be 4 spaces
  set softtabstop=4
  " When shifting, use 4 spaces
  set shiftwidth=4
endfunction

" Make sure all markdown files have the correct filetype set and setup wrapping
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} set ft=markdown | call s:setupWrapping() | call s:setupFourSpacesIndent()

" LaTeX files should also have Wrapping
au BufRead,BufNewFile *.tex call s:setupWrapping()

" Set the Ruby filetype for a number of common Ruby files without .rb
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Procfile,Guardfile,Capfile,config.ru,*.rake,*.rabl} set ft=ruby

" Treat JSON files like JavaScript
au BufNewFile,BufRead *.json set ft=javascript

" Recognize CoffeeScript
au BufNewFile,BufRead *.coffee set ft=coffee

" === Movements ===
" Stolen from railsbros-dirk

" Make cursor move by visual lines instead of file lines (when wrapping)
map k gk
map j gj

" === Custom Functions ===
" Stuff I wrote to enhance my workflow

" Open the current file in Marked
function Marked()
  silent !open -a Marked %
  redraw!
endfunction
command! Marked
      \ execute Marked()

function JSLint()
  :Dispatch jslint %
endfunction
command! JSLint
      \ execute JSLint()

function JSHint()
  :Dispatch jshint %
endfunction
command! JSHint
      \ execute JSHint()

" === Leader Key ===

nnoremap <Leader>m :Make<CR>

" --- End ---
" This is required for Vundle
filetype plugin indent on
