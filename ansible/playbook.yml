---
- name: Install the required packages
  hosts: all
  vars:
    full_name: "Lucas Dohmen"
    email: "lucas@dohmen.io"
    url: "https://lucas.dohmen.io"

    go_version: go1.9.2
    go_checksum: sha256:de874549d9a8d8d8062be05808509c09a88a248e77ec14eb77453530829ac02b
    nodejs_version: 8.x
    ruby_version: 2.4
    compose_version: 1.17.0-rc1
    compose_checksum: sha1:27f3648e33ee5c8f68c1d05c9e51a5b6669f94bd

    apt_keys:
      - 'http://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc'
      - 'https://deb.nodesource.com/gpgkey/nodesource.gpg.key'
      - 'https://download.docker.com/linux/ubuntu/gpg'
    apt_repositories:
      - 'deb http://packages.erlang-solutions.com/ubuntu xenial contrib'
      - 'deb https://deb.nodesource.com/node_{{ nodejs_version }} xenial main'
      - 'deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable'
      - 'ppa:brightbox/ruby-ng'
      - 'ppa:jonathonf/vim'
    apt_packages:
      - build-essential
      - curl
      - docker-ce
      - elixir
      - git
      - htop
      - jq
      - nodejs
      - openjdk-9-jdk-headless
      - ragel
      - ruby-switch
      - ruby{{ ruby_version }}
      - ruby{{ ruby_version }}-dev
      - silversearcher-ag
      - tig
      - tmux
      - tree
      - vim
      - wget
      - xsel
      - xorg
      - youtube-dl
      - zsh
    vim_packages:
      editorconfig-vim: editorconfig/editorconfig-vim
      neomake: benekastah/neomake
      vim-colors-solarized: altercation/vim-colors-solarized
      vim-commentary: tpope/vim-commentary
      vim-polyglot: sheerun/vim-polyglot
      vim-surround: tpope/vim-surround
      vim-repeat: tpope/vim-repeat
    npm_packages:
      - alex
      - heroku-cli
    ruby_gems:
      - awesome_print
      - bundler
      - manpages
      - mdless
      - pry
      - tmuxinator
    go_packages:
      - github/hub
    marks:
      c: /home/vagrant/Code
      d: /vagrant
    spell_files:
      - en.utf-8.spl
      - en.utf-8.sug
      - de.utf-8.spl
      - de.utf-8.sug

  tasks:
    - name: Find all Dotfiles
      shell: ls -1 /vagrant/tilde
      register: dotfiles
    - name: Link Dotfiles
      file:
        path: /home/vagrant/.{{ item }}
        src: /vagrant/tilde/{{ item }}
        owner: vagrant
        group: vagrant
        state: link
      with_items: "{{ dotfiles.stdout_lines }}"

    - name: Add APT Keys
      apt_key: url="{{ item }}"
      with_items: "{{ apt_keys }}"
      become: true
    - name: Add APT Repositories
      apt_repository: repo="{{ item }}" state=present
      with_items: "{{ apt_repositories }}"
      become: true
    - name: Install aptitude
      apt: name=aptitude
      become: true
    - name: Update cache and upgrade
      apt: update_cache=yes upgrade=safe
      become: true
    - name: Install missing packages
      apt: name={{ item }}
      with_items: "{{ apt_packages }}"
      become: true

    - name: Set default shell for Vagrant user
      user: name=vagrant shell=/bin/zsh
      become: true
    - name: Install ZSH Syntax Highlighting
      git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting
        dest: /home/vagrant/.zsh/plugins/zsh-syntax-highlighting

    - name: Add the vagrant user to the docker group
      user:
        name: vagrant
        groups: docker
        append: yes
      become: true
    - name: Install docker-compose
      get_url:
        url: https://github.com/docker/compose/releases/download/{{ compose_version }}/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: +x
        checksum: "{{ compose_checksum }}"
      become: true

    - name: Set the timezone
      command: timedatectl set-timezone Europe/Berlin
      become: true

    - name: Create the Code directory
      file: path=/home/vagrant/Code state=directory
    - name: Create the marks directory
      file: path=/home/vagrant/.marks state=directory
    - name: Configure the marks
      file: path=/home/vagrant/.marks/{{ item.key }} state=link src={{ item.value }} force=yes
      with_dict: "{{ marks }}"

    - name: Install default Ruby gems
      gem: name={{ item }}
      with_items: "{{ ruby_gems }}"
      become: true

    - name: Install default NPM packages
      npm: name={{ item }} global=yes
      with_items: "{{ npm_packages }}"
      become: true

    - name: Set NPM author name
      command: npm set init-author-name "{{ full_name }}"
    - name: Set NPM author email
      command: npm set init-author-email "{{ email }}"
    - name: Set NPM author url
      command: npm set init-author-url "{{ url }}"

    - name: Install or update vim plugins
      git: repo=https://github.com/{{ item.value }} dest=/home/vagrant/.vim/pack/bundle/start/{{ item.key }}
      with_dict: "{{ vim_packages }}"
    - name: Create spell directory
      file: path=/home/vagrant/.vim/spell state=directory
    - name: Install spell files for vim
      get_url: url=http://ftp.vim.org/pub/vim/runtime/spell/{{ item }} dest=/home/vagrant/.vim/spell/{{ item }}
      with_items: "{{ spell_files }}"

    - name: Install leiningen
      get_url:
        url: https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
        dest: /usr/local/bin/lein
        mode: +x
      become: true

    - name: Register the current Go version (if any)
      shell: /usr/local/go/bin/go version | awk '{print $3}'
      ignore_errors: yes
      register: current_go_version
      changed_when: false
    - name: Download go
      get_url:
        url: https://storage.googleapis.com/golang/{{ go_version }}.linux-amd64.tar.gz
        dest: /tmp/{{ go_version }}.linux-amd64.tar.gz
        checksum: "{{ go_checksum }}"
      when: current_go_version|failed or current_go_version.stdout != go_version
    - name: Remove old installation of Go
      file:
        path: /usr/local/go
        state: absent
      become: true
      when: current_go_version|failed or current_go_version.stdout != go_version
    - name: Uncompress go archive
      unarchive:
        src: /tmp/{{ go_version }}.linux-amd64.tar.gz
        dest: /usr/local
        copy: no
      become: true
      when: current_go_version|failed or current_go_version.stdout != go_version
    - name: Install go packages
      command: /usr/local/go/bin/go get github.com/{{ item }}
      with_items: "{{ go_packages }}"
